digraph g {
forcelabels=true;
rankdir=TD;
28[label="int
main()
{
	std::stack<Node*> nodes;

	Node* previousNode = nullptr;
	
	for (int i = 0; i < 5; i++)
	{
		SpecifiedNode* node = new SpecifiedNode();
		node->type = PayloadType::OnePayload;
		node->payload = i;
		node->link = previousNode;
		previousNode = node;
		nodes.push(node);
	}

	for (int i = 0; i < 6; i++)
	{
		previousNode = previousNode->link;
	}
	
	return (0);
}", xlabel="No. 28 (345506), Function", color="green"];
27[label="{
	std::stack<Node*> nodes;

	Node* previousNode = nullptr;
	
	for (int i = 0; i < 5; i++)
	{
		SpecifiedNode* node = new SpecifiedNode();
		node->type = PayloadType::OnePayload;
		node->payload = i;
		node->link = previousNode;
		previousNode = node;
		nodes.push(node);
	}

	for (int i = 0; i < 6; i++)
	{
		previousNode = previousNode->link;
	}
	
	return (0);
}", xlabel="No. 27 (346514), CompoundStmt", color="green"];
26[label="return (0);", xlabel="No. 26 (346512), ReturnStmt", color="darkorchid"];
25[label="for (int i = 0; i < 6; i++)
	{
		previousNode = previousNode->link;
	}", xlabel="No. 25 (346497), ForStmt", color="green"];
24[label="{
		previousNode = previousNode->link;
	}", xlabel="No. 24 (346494), CompoundStmt", color="green"];
23[label="previousNode = previousNode->link;", xlabel="No. 23 (346490), BinaryOperator", color="green"];
20[label="for (int i = 0; i < 5; i++)
	{
		SpecifiedNode* node = new SpecifiedNode();
		node->type = PayloadType::OnePayload;
		node->payload = i;
		node->link = previousNode;
		previousNode = node;
		nodes.push(node);
	}", xlabel="No. 20 (346418), ForStmt", color="darkorchid"];
19[label="{
		SpecifiedNode* node = new SpecifiedNode();
		node->type = PayloadType::OnePayload;
		node->payload = i;
		node->link = previousNode;
		previousNode = node;
		nodes.push(node);
	}", xlabel="No. 19 (346411), CompoundStmt", color="darkorchid"];
18[label="previousNode = node;", xlabel="No. 18 (346403), BinaryOperator", color="darkorchid"];
17[label="node->link = previousNode;", xlabel="No. 17 (346384), BinaryOperator", color="darkorchid"];
16[label="node->payload = i;", xlabel="No. 16 (346356), BinaryOperator", color="darkorchid"];
15[label="node->type = PayloadType::OnePayload;", xlabel="No. 15 (346328), BinaryOperator", color="darkorchid"];
14[label="SpecifiedNode* node = new SpecifiedNode();", xlabel="No. 14 (346037), DeclStmt", color="darkorchid"];
13[label="new SpecifiedNode();", xlabel="No. 13 (346029), CXXNewExpr", color="darkorchid"];
0[label="OnePayload,", xlabel="No. 0 (345303), EnumConstant", color="crimson"];
1[label="AnotherPayload,", xlabel="No. 1 (345313), EnumConstant", color="crimson"];
2[label="LastPayload", xlabel="No. 2 (345323), EnumConstant", color="crimson"];
3[label="enum PayloadType
{
	OnePayload,
	AnotherPayload,
	LastPayload
};", xlabel="No. 3 (345277), Enum", color="crimson"];
4[label="int payload;", xlabel="No. 4 (345391), Field", color="crimson"];
5[label="Node* link;", xlabel="No. 5 (345410), Field", color="crimson"];
6[label="struct Node
{
	int payload;
	Node* link;
};", xlabel="No. 6 (345333), CXXRecord", color="crimson"];
7[label="PayloadType type;", xlabel="No. 7 (345488), Field", color="crimson"];
8[label="struct SpecifiedNode : Node
{
	PayloadType type;
};", xlabel="No. 8 (345423), CXXRecord", color="crimson"];
9[label="std::stack<Node*> nodes;", xlabel="No. 9 (345553), DeclStmt", color="darkorchid"];
10[label="Node* previousNode = nullptr;", xlabel="No. 10 (345576), DeclStmt", color="darkorchid"];
11[label="int i = 0;", xlabel="No. 11 (345599), DeclStmt", color="darkorchid"];
12[label="i++)", xlabel="No. 12 (345621), UnaryOperator", color="darkorchid"];
28 -> 27;
25 -> 24;
24 -> 23;
20 -> 11;
20 -> 12;
20 -> 19;
27 -> 9;
27 -> 10;
27 -> 20;
27 -> 25;
27 -> 26;
14 -> 13;
8 -> 7;
19 -> 14;
19 -> 15;
19 -> 16;
19 -> 17;
19 -> 18;
6 -> 4;
6 -> 5;
3 -> 0;
3 -> 1;
3 -> 2;
10 -> 17 [color=maroon];
10 -> 18 [color=maroon];
10 -> 23 [color=maroon];
14 -> 15 [color=maroon];
14 -> 16 [color=maroon];
14 -> 17 [color=maroon];
14 -> 18 [color=maroon];
11 -> 12 [color=maroon];
11 -> 16 [color=maroon];
11 -> 20 [color=maroon];
}
