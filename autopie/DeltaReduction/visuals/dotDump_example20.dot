digraph g {
forcelabels=true;
rankdir=TD;
23[label="int main()
{
	const int n = 20;
	long loop_result = 1;
	
	for (int i = 1; i <= n; 
		i++)
	{
		loop_result *= i;
	}
	
	long recursive_result = get_factorial(n);
	
	if (loop_result != recursive_result)
	{
		std::cout << loop_result << \"\n\"; 
		std::cout << recursive_result << \"\n\";
			
		return (1);
	}
	
	std::cout << \"Success.\n\";
	
	return (0);
}", xlabel="No. 23 (871604), Function", color="green"];
22[label="{
	const int n = 20;
	long loop_result = 1;
	
	for (int i = 1; i <= n; 
		i++)
	{
		loop_result *= i;
	}
	
	long recursive_result = get_factorial(n);
	
	if (loop_result != recursive_result)
	{
		std::cout << loop_result << \"\n\"; 
		std::cout << recursive_result << \"\n\";
			
		return (1);
	}
	
	std::cout << \"Success.\n\";
	
	return (0);
}", xlabel="No. 22 (878554), CompoundStmt", color="darkorchid"];
21[label="return (0);", xlabel="No. 21 (878552), ReturnStmt", color="darkorchid"];
20[label="std::cout << \"Success.\n\";", xlabel="No. 20 (878536), CXXOperatorCallExpr", color="goldenrod"];
19[label="if (loop_result != recursive_result)
	{
		std::cout << loop_result << \"\n\"; 
		std::cout << recursive_result << \"\n\";
			
		return (1);
	}", xlabel="No. 19 (877565), IfStmt", color="darkorchid"];
18[label="{
		std::cout << loop_result << \"\n\"; 
		std::cout << recursive_result << \"\n\";
			
		return (1);
	}", xlabel="No. 18 (877560), CompoundStmt", color="darkorchid"];
17[label="return (1);", xlabel="No. 17 (877558), ReturnStmt", color="darkorchid"];
16[label="std::cout << recursive_result << \"\n\";", xlabel="No. 16 (877542), CXXOperatorCallExpr", color="goldenrod"];
15[label="std::cout << recursive_result", xlabel="No. 15 (877078), CXXOperatorCallExpr", color="goldenrod"];
14[label="std::cout << loop_result << \"\n\";", xlabel="No. 14 (876597), CXXOperatorCallExpr", color="goldenrod"];
13[label="std::cout << loop_result", xlabel="No. 13 (875561), CXXOperatorCallExpr", color="goldenrod"];
0[label="get_factorial(n - 1))", xlabel="No. 0 (871575), CallExpr", color="green"];
1[label="return (n * get_factorial(n - 1));", xlabel="No. 1 (871594), ReturnStmt", color="green"];
2[label="{
	// Missing the stopping 
	// constraint 
	// => segmentation fault.
	return (n * get_factorial(n - 1));
}", xlabel="No. 2 (871596), CompoundStmt", color="green"];
3[label="long get_factorial(int n)
{
	// Missing the stopping 
	// constraint 
	// => segmentation fault.
	return (n * get_factorial(n - 1));
}", xlabel="No. 3 (871513), Function", color="green"];
4[label="const int n = 20;", xlabel="No. 4 (871655), DeclStmt", color="darkorchid"];
5[label="long loop_result = 1;", xlabel="No. 5 (871681), DeclStmt", color="darkorchid"];
6[label="int i = 1;", xlabel="No. 6 (871704), DeclStmt", color="darkorchid"];
7[label="i++)", xlabel="No. 7 (871733), UnaryOperator", color="darkorchid"];
8[label="loop_result *= i;", xlabel="No. 8 (871750), CompoundAssignOperator", color="darkorchid"];
9[label="{
		loop_result *= i;
	}", xlabel="No. 9 (871756), CompoundStmt", color="darkorchid"];
10[label="for (int i = 1; i <= n; 
		i++)
	{
		loop_result *= i;
	}", xlabel="No. 10 (871759), ForStmt", color="darkorchid"];
11[label="get_factorial(n);", xlabel="No. 11 (871802), CallExpr", color="goldenrod"];
12[label="long recursive_result = get_factorial(n);", xlabel="No. 12 (871814), DeclStmt", color="darkorchid"];
19 -> 18;
18 -> 14;
18 -> 16;
18 -> 17;
14 -> 13;
12 -> 11;
23 -> 22;
10 -> 6;
10 -> 7;
10 -> 9;
22 -> 4;
22 -> 5;
22 -> 10;
22 -> 12;
22 -> 19;
22 -> 20;
22 -> 21;
9 -> 8;
16 -> 15;
3 -> 2;
2 -> 1;
12 -> 15 [color=maroon];
12 -> 19 [color=maroon];
4 -> 10 [color=maroon];
4 -> 11 [color=maroon];
5 -> 8 [color=maroon];
5 -> 13 [color=maroon];
5 -> 19 [color=maroon];
6 -> 7 [color=maroon];
6 -> 8 [color=maroon];
6 -> 10 [color=maroon];
}
